import { errors } from '../lib/index.mjs'
import { UZERO, fromBigInt, fromNumber, ZERO } from 'longfn'

export const fixtures = [
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000,
    uint32: [0b00000000],
    sint32: [0b00000000],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000001,
    uint32: [0b00000001],
    sint32: [0b00000010],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000010,
    uint32: [0b00000010],
    sint32: [0b00000100],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0010001,
    uint32: [0b00010001],
    sint32: [0b00100010],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_1000000,
    uint32: [0b01000000],
    sint32: [0b10000000, 0b00000001],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000001_0000000,
    uint32: [0b10000000, 0b00000001],
    sint32: [0b10000000, 0b00000010],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000001_1111111,
    uint32: [0b11111111, 0b00000001],
    sint32: [0b11111110, 0b00000011],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000010_0101100,
    uint32: [0b10101100, 0b00000010],
    sint32: [0b11011000, 0b00000100],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000001_0000000_0000000,
    uint32: [0b10000000, 0b10000000, 0b00000001],
    sint32: [0b10000000, 0b10000000, 0b00000010],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000001_1111111_1111111,
    uint32: [0b11111111, 0b11111111, 0b00000001],
    sint32: [0b11111110, 0b11111111, 0b00000011],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000010_0111000_1000000,
    uint32: [0b11000000, 0b10111000, 0b00000010],
    sint32: [0b10000000, 0b11110001, 0b00000100],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000000_0001001_0010000_0100000_0110010,
    uint32: [0b10110010, 0b10100000, 0b10010000, 0b0001001],
    sint32: [0b11100100, 0b11000000, 0b10100000, 0b0010010],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000011_1111111_1111111_1111111_1111111,
    uint32: [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000011],
    sint32: [0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b00000111],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000001_0000000_0000000_0000000_0000000,
    uint32: [0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00000001],
    sint32: [0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00000010],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000011_1111111_1111111_1111111_1111111,
    uint32: [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000011],
    sint32: [0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b00000111],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0000111_1111111_1111111_1111111_1111111,
    uint32: [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000111],
    sint32: [0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0001000_0000000_0000000_0000000_0000000,
    uint32: [0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00001000],
    sint64: [0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00010000],
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0001111_1111111_1111111_1111111_1111111,
    uint32: [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint64: [0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b00011111],
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    num: 0b0_0000000_0000000_0000000_0000000_0010000_0000000_0000000_0000000_0000000,
    uint64: [0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00010000],
    sint64: [0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00100000],
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    big: 0b0_0000000_0000000_0000000_0000011_0010100_1000010_0001110_1000101_1011001n,
    uint64: [
      0b11011001, 0b11000101, 0b10001110, 0b11000010, 0b10010100, 0b00000011,
    ],
    sint64: [
      0b10110010, 0b10001011, 0b10011101, 0b10000100, 0b10101001, 0b00000110,
    ],
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    big: 0b0_0000000_0000000_0000000_0000100_0000000_0000000_0000000_0000000_0000000n,
    uint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00000100,
    ],
    sint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00001000,
    ],
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    big: 0b0_0000000_0000000_0000001_0000000_0000000_0000000_0000000_0000000_0000000n,
    uint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b00000001,
    ],
    sint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b00000010,
    ],
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    big: 0b0_0000000_0000001_0000000_0000000_0000000_0000000_0000000_0000000_0000000n,
    uint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b10000000, 0b00000001,
    ],
    sint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b10000000, 0b00000010,
    ],
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    big: 0b0_0000001_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000n,
    uint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b10000000, 0b10000000, 0b00000001,
    ],
    sint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b10000000, 0b10000000, 0b00000010,
    ],
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    big: 0b0_0110001_0011100_0110001_0111011_0010111_0001111_1110001_1101010_0010111n,
    uint64: [
      0b10010111, 0b11101010, 0b11110001, 0b10001111, 0b10010111, 0b10111011,
      0b10110001, 0b10011100, 0b00110001,
    ],
    sint64: [
      0b10101110, 0b11010100, 0b11100011, 0b10011111, 0b10101110, 0b11110110,
      0b11100010, 0b10111000, 0b01100010,
    ],
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
  },
  {
    big: 0b1_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000n,
    uint64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b10000000, 0b10000000, 0b10000000, 0b00000001,
    ],
    sint64: errors.INVALID_LONG,
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
    int64: errors.INVALID_LONG,
  },
  {
    big: 0b1_1000100_0001001_1000000_0100000_0010000_0001000_0000100_0000010_0000001n,
    uint64: [
      0b10000001, 0b10000010, 0b10000100, 0b10001000, 0b10010000, 0b10100000,
      0b11000000, 0b10001001, 0b11000100, 0b00000001,
    ],
    sint64: errors.INVALID_LONG,
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
    int64: errors.INVALID_LONG,
  },
  {
    big: 0b1_1010101_0101010_1010101_0101010_1010101_0101010_1010101_0101010_1010101n,
    uint64: [
      0b11010101, 0b10101010, 0b11010101, 0b10101010, 0b11010101, 0b10101010,
      0b11010101, 0b10101010, 0b11010101, 0b00000001,
    ],
    sint64: errors.INVALID_LONG,
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
    int64: errors.INVALID_LONG,
  },
  {
    big: 0b1_1111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111n,
    uint64: [
      0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    sint64: errors.INVALID_LONG,
    uint32: errors.UINT32_TOO_LARGE,
    sint32: errors.INT32_TOO_LARGE,
    int32: errors.INT32_TOO_LARGE,
    int64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000001,
    int64: [
      0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b00000001],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000010,
    int64: [
      0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b00000011],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000011,
    int64: [
      0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b00000101],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000100,
    int64: [
      0b11111100, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b11111100, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b00000111],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0001000,
    int64: [
      0b11111000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b11111000, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b00001111],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0001001,
    int64: [
      0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b00010001],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_1111111,
    int64: [
      0b10000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b10000001, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b11111101, 0b00000001],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000010_0100000_1111111,
    int64: [
      0b10000001, 0b11011111, 0b11111101, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b10000001, 0b11011111, 0b11111101, 0b11111111, 0b00001111],
    sint32: [0b11111101, 0b11000001, 0b00000100],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000000_0000000_1000000_0000001,
    int64: [
      0b11111111, 0b10111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b11111111, 0b10111111, 0b11111111, 0b11111111, 0b00001111],
    sint32: [0b10000001, 0b10000000, 0b00000001],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000000_0000100_0000010_0100000_1111111,
    int64: [
      0b10000001, 0b11011111, 0b11111101, 0b11111011, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b10000001, 0b11011111, 0b11111101, 0b11111011, 0b00001111],
    sint32: [0b11111101, 0b11000001, 0b10000100, 0b00001000],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000011_1011111_1111111_1111111_1111111,
    int64: [
      0b10000001, 0b10000000, 0b10000000, 0b10100000, 0b11111100, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b10000001, 0b10000000, 0b10000000, 0b10100000, 0b00001100],
    sint32: [0b11111101, 0b11111111, 0b11111111, 0b10111111, 0b00000111],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000111_1110000_0000000_0000000_0000000,
    int64: [
      0b10000000, 0b10000000, 0b10000000, 0b10010000, 0b11111000, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b10000000, 0b10000000, 0b10000000, 0b10010000, 0b00001000],
    sint32: [0b11111111, 0b11111111, 0b11111111, 0b11011111, 0b00001111],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0000111_1111111_1111111_1111111_1111111,
    int64: [
      0b10000001, 0b10000000, 0b10000000, 0b10000000, 0b11111000, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b10000001, 0b10000000, 0b10000000, 0b10000000, 0b00001000],
    sint32: [0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    num: -0b0_0000000_0000000_0000000_0000000_0001000_0000000_0000000_0000000_0000000,
    int64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b11111000, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: [0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00001000],
    sint32: [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00001111],
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    big: -0b0_0000000_0000000_0000000_0000000_0001000_0000000_0000000_0000000_0000001n,
    int64: [
      0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11110111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    sint64: [0b10000001, 0b10000000, 0b10000000, 0b10000000, 0b00010000],
    int32: errors.INT32_TOO_SMALL,
    sint32: errors.INT32_TOO_SMALL,
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    big: -0b0_0000000_0000000_0000000_0000100_0001000_0000000_0000000_0000000_0000001n,
    int64: [
      0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11110111, 0b11111011,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    sint64: [
      0b10000001, 0b10000000, 0b10000000, 0b10000000, 0b10010000, 0b00001000,
    ],
    int32: errors.INT32_TOO_SMALL,
    sint32: errors.INT32_TOO_SMALL,
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    big: -0b0_0000000_0000000_0001001_00000100_0001000_0000000_0000000_0000000_0000001n,
    int64: [
      0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11110111, 0b11111011,
      0b11101101, 0b11111111, 0b11111111, 0b00000001,
    ],
    sint64: [
      0b10000001, 0b10000000, 0b10000000, 0b10000000, 0b10010000, 0b10001000,
      0b00100100,
    ],
    int32: errors.INT32_TOO_SMALL,
    sint32: errors.INT32_TOO_SMALL,
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    big: -0b0_0000000_0000000_0100010_10001000_1000000_0100000_0001000_0000001_1000001n,
    int64: [
      0b10111111, 0b11111110, 0b11110111, 0b11011111, 0b10111111, 0b11110111,
      0b10111010, 0b11111111, 0b11111111, 0b00000001,
    ],
    sint64: [
      0b10000001, 0b10000011, 0b10010000, 0b11000000, 0b10000000, 0b10010001,
      0b10001010, 0b00000001,
    ],
    int32: errors.INT32_TOO_SMALL,
    sint32: errors.INT32_TOO_SMALL,
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    big: -0b0_0000100_0011010_0010001_01101000_0110010_0100100_0001000_0000001_1000001n,
    int64: [
      0b10111111, 0b11111110, 0b11110111, 0b11011011, 0b11001101, 0b10010111,
      0b11011101, 0b11001011, 0b11110111, 0b00000001,
    ],
    sint64: [
      0b10000001, 0b10000011, 0b10010000, 0b11001000, 0b11100100, 0b11010000,
      0b11000101, 0b11101000, 0b00010000,
    ],
    int32: errors.INT32_TOO_SMALL,
    sint32: errors.INT32_TOO_SMALL,
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    big: -0b0_1111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111n,
    int64: [
      0b10000001, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b10000000, 0b10000000, 0b10000000, 0b00000001,
    ],
    sint64: [
      0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: errors.INT32_TOO_SMALL,
    sint32: errors.INT32_TOO_SMALL,
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
  {
    big: -0b1_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000n,
    int64: [
      0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000,
      0b10000000, 0b10000000, 0b10000000, 0b00000001,
    ],
    sint64: [
      0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
      0b11111111, 0b11111111, 0b11111111, 0b00000001,
    ],
    int32: errors.INT32_TOO_SMALL,
    sint32: errors.INT32_TOO_SMALL,
    uint32: errors.NUMBER_NEGATIVE,
    uint64: errors.INVALID_LONG,
  },
].map(function (fixture) {
  if (!fixture.ulong)
    fixture.ulong = fixture.num
      ? fixture.num < 0
        ? errors.INVALID_LONG
        : fromNumber(fixture.num, true)
      : fixture.big
        ? fixture.big < 0n
          ? errors.INVALID_LONG
          : fromBigInt(fixture.big, true)
        : UZERO
  if (!fixture.long)
    fixture.long = fixture.big
      ? fixture.big >=
        0b1_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000n
        ? errors.INVALID_LONG
        : fromBigInt(fixture.big, false)
      : fixture.num
        ? fromNumber(fixture.num, false)
        : ZERO
  if (!fixture.int32) fixture.int32 = fixture.uint32
  if (!fixture.uint64) fixture.uint64 = fixture.uint32
  if (!fixture.int64)
    fixture.int64 =
      typeof fixture.int32 === 'string'
        ? fixture.uint64 ?? fixture.int32
        : fixture.int32
  if (!fixture.sint64) fixture.sint64 = fixture.sint32
  return fixture
})
